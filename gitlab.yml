---
- hosts: gitlab
  sudo: yes
  vars_files:
    - vars.yml
  tasks:
    - name: add domain to hosts file for fast resolution
      action: template src=templates/hosts.j2 dest=/etc/hosts
    - name: ensure apt cache is up to date  if < 2 hour
      action: apt update_cache=yes cache_valid_time=7200
    - name: ensure app apt dependencies are installed
      action: apt pkg={{ item }}
      with_items:
        - build-essential
        - zlib1g-dev
        - libyaml-dev
        - libssl-dev
        - libgdbm-dev
        - libreadline-dev
        - libncurses5-dev
        - libffi-dev
        - curl
        - git-core
        - openssh-server
        - redis-server
        - postfix
        - checkinstall
        - libxml2-dev
        - libxslt1-dev
        - libcurl4-openssl-dev
        - libicu-dev
        - mysql-server
        - mysql-client
        - libmysqlclient-dev
        - python-mysqldb # Required for ansible mysql module to work, see: http://ansible.cc/docs/modules.html#mysql-user

- hosts: gitlab
  sudo: yes
  tasks:
    - name: ensure /usr/local/bin/python2 links to /usr/bin/python
      file: state=link src=/usr/bin/python path=/usr/local/bin/python2

# Compile Ruby!

- hosts: gitlab
  sudo: no
  vars:
    ruby_version: 2.1.2
    url: ftp://ftp.ruby-lang.org/pub/ruby/2.1/ruby-{{ruby_version}}.tar.gz
    path: /tmp/ruby/ruby-{{ruby_version}}
  tasks:
    - name: ensure directory /tmp/ruby is present
      file: state=directory path=/tmp/ruby
    - name: ensure ruby is downloaded
      get_url: url={{url}} dest=/tmp/ruby/ruby-{{ruby_version}}.tar.gz force=no
    - name: ensure ruby is extracted
      command: tar -xf ruby-{{ruby_version}}.tar.gz chdir=/tmp/ruby creates={{path}}
    - name: ensure ruby is configured
      command: ./configure --disable-install-rdoc chdir={{path}} creates={{path}}/Makefile
    - name: ensure ruby is compiled
      command: make -j{{ansible_processor_cores}} chdir={{path}} creates={{path}}/ruby

- hosts: gitlab
  sudo: yes
  vars:
    path: /tmp/ruby/ruby-2.1.2
  tasks:
    - name: ensure ruby is installed
      command: make install chdir={{path}} creates=/usr/local/bin/ruby
    - name: ensure bundler is installed
      command: gem install bundler --no-ri --no-rdoc creates=/usr/local/lib/ruby/gems/2.1.2/gems/bundler-1.3.0
    - name: ensure gitlab-markup is installed
      command: gem install github-markup

# System Users

- hosts: gitlab
  sudo: yes
  tasks:
    - name: ensure user git is present
      user: state=present name=git system=yes shell=/bin/sh comment="Git Version Control"

# GitLab

- hosts: gitlab
  sudo: yes
  sudo_user: git
  vars:
    gitlab_version: 7-1-stable
  vars_files:
    - vars.yml
  tasks:
    - name: ensure GitLab {{gitlab_version}} is cloned
      git: repo=https://github.com/gitlabhq/gitlabhq.git dest=/home/git/gitlab version={{gitlab_version}}
    - name: Generate gitlab.yml config from templates/gitlab.yml.j2
      action: template src=templates/gitlab.yml.j2 dest=/home/git/gitlab/config/gitlab.yml mode=0755
    - name: copy unicorn config file from templates/unicorn.rb
      copy: src=templates/unicorn.rb dest=/home/git/gitlab/config/unicorn.rb
            owner=git group=git mode=0644 backup=yes
    - name: Copy rack_attack.rb config file from gitlab model    
      command: cp /home/git/gitlab/config/initializers/rack_attack.rb.example /home/git/gitlab/config/initializers/rack_attack.rb
    - name: copy resque.yml
      copy: src=templates/resque.yml dest=/home/git/gitlab/config/resque.yml
           owner=git group=git mode=0644 backup=yes
    - name: Make sure that socket dir exists
      action: file path=/home/git/gitlab/tmp/sockets state=directory

- hosts: gitlab
  sudo: yes
  sudo_user: git
  vars_files:
    - vars.yml
  tasks:
    - name: ensure directory for satellites exists
      file: state=directory path=/home/git/gitlab-satellites mode=0750
    - name: ensure database config is written
      action: template src=templates/database.yml.j2 dest=/home/git/gitlab/config/database.yml mode=0755
    - name: ensure database gitlabhq_production is present
      mysql_db: state=present name=gitlabhq_production collation=utf8_unicode_ci encoding=utf8
    - name: ensure database user gitlab is present and has privileges
      mysql_user: state=present name=gitlab host=localhost password={{database_password}} priv=gitlabhq_production.*:ALL

- hosts: gitlab
  sudo: yes
  sudo_user: git
  vars_files:
    - vars.yml
  tasks:
    - name: ensure git user propertie user.name is OK
      command: git config --global user.name "GitLab"
    - name: ensure git user propertie user.email is OK
      command: git config --global user.email "gitlab@{{domain_name}}"
    - name: ensure git user propertie core.autocrlf is OK
      command: git config --global core.autocrlf input
    - name: ensure GitLab-shell bundle is installed
      command: bundle install -j{{ansible_processor_cores}} --deployment --without development test postgres chdir=/home/git/gitlab
    - shell: yes 'yes' | bundle exec rake gitlab:shell:install[v1.9.6] REDIS_URL=redis://localhost:6379 RAILS_ENV=production chdir=/home/git/gitlab


- hosts: gitlab
  sudo: yes
  tasks:
    - name: ensure GitLab can write to log (2)
      command: chmod -R u+rwX /home/git/gitlab/log
    - name: ensure GitLab can write to log (2)
      command: chmod -R u+rwX /home/git/gitlab/tmp

- hosts: gitlab
  sudo: yes
  sudo_user: git
  vars_files:
    - vars.yml
  tasks:
    - name: ensure GitLab bundle is installed
      command: bundle install -j{{ansible_processor_cores}} --deployment --without development test postgres chdir=/home/git/gitlab

- hosts: gitlab
  sudo: yes
  sudo_user: git
  tasks:
    - name: Deploy gitlab in production emode
      shell: yes 'yes' | bundle exec rake gitlab:setup RAILS_ENV=production chdir=/home/git/gitlab
    - name: precompile assets 
      shell: yes 'yes'| bundle exec rake assets:precompile RAILS_ENV=production chdir=/home/git/gitlab

# GitLab : startup file and config file

- hosts: gitlab
  sudo: yes
  tasks:
    - name: ensure logrotate script is installed  (from lib/support)
      command: cp /home/git/gitlab/lib/support/logrotate/gitlab /etc/logrotate.d/gitlab
    - name: set /etc/logrotate.d/gitlab permission
      command: chmod 755 /etc/logrotate.d/gitlab
    - name: ensure init script is installed (from lib/support)
      command: cp /home/git/gitlab/lib/support/init.d/gitlab /etc/init.d/gitlab 
    - name: set /etc/init.d/gitlab permission
      command: chmod 755 /etc/init.d/gitlab
    - name: make GitLab start on boot
      command: update-rc.d gitlab defaults 21
      ignore_errors: yes
    - name: stop GitLab
      command: /etc/init.d/gitlab stop
      ignore_errors: yes
    - name: start GitLab
      command: /etc/init.d/gitlab start
      ignore_errors: yes

# Deploy and configure Nginx
- hosts: gitlab
  sudo: yes
  vars_files:
    - vars.yml
  tasks:
    - name: ensure package nginx is present
      apt: state=present pkg=nginx
    - name: ensure GitLab Nginx site is available
      action: template src=templates/nginx.conf.j2 dest=/etc/nginx/sites-available/gitlab mode=0755
    - name: ensure default Nginx site is not enabled
      file: state=absent path=/etc/nginx/sites-enabled/default
    - name: ensure GitLab Nginx site is enabled
      file: state=link src=/etc/nginx/sites-available/gitlab path=/etc/nginx/sites-enabled/gitlab

- hosts: gitlab
  sudo: yes
  vars_files:
    - vars.yml
  tasks:
    - name: restart Nginx
      command: /etc/init.d/nginx restart

    - name: You can connect to http://{{domain_name}} with user root and password 5iveL!fe
      command: echo 'Enjoy - you can connect to http://{{domain_name}}/, user root and password 5iveL!fe'

